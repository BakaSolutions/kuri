class RSQ {
  constructor (arr) {
    if (!Array.isArray(arr)) return false;

    for (let i = 0; i < arr.length; i++) {
      arr[i] = `/${arr[i].split('.').pop()}/${arr[i]}`;
    }

    this.queue = arr;
    this.fileCount = 0;
  }

  run () {
    this.request(this.queue[0]);
  }

  calculateProgressBar () {
    let p = Math.floor(this.fileCount/this.queue.length * 100);

    console.log(p + '% of dependencies loaded');
    document.querySelector('#progressBar').style.width = p + 'vw';
    if (p == 100) document.querySelector('#progressBar').style.display = 'none';
  }

  request (url) {
    let xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.onload = () => {
      if (xhr.status >= 400) {
        console.error(url + ' - ' + xhr.statusText);
      } else {
        let node;
        switch (url.split('.').pop()) {
          case 'js':
            node = document.createElement('script');
            node.innerHTML = xhr.response;
            break
          case 'css':
            node = document.createElement('style');
            node.type = 'text/css';
            if (node.styleSheet) {
              node.styleSheet.cssText = xhr.response;
            } else {
              node.appendChild(document.createTextNode(xhr.response));
            }
            break
        }

        console.log(`${url} succesfully loaded!`);
        document.querySelector('head').appendChild(node);
      }

      this.fileCount++;
      this.calculateProgressBar();

      if (this.fileCount < this.queue.length) {
        this.request(this.queue[this.fileCount])
      }
    };

    xhr.onerror = (event) => {
      console.log('error: ', url, xhr, event);
    };

    xhr.send();
  }
}
