class RSQ {
  constructor (arr) {
    if (!Array.isArray(arr)) return false;

    for (let i = 0; i < arr.length; i++) {
      arr[i] = `/${arr[i].split('.').pop()}/${arr[i]}`;
    }

    localStorage.resquer ? false : (() => localStorage.resquer = '{}')();
    this.queue = arr;
    this.fileCount = 0;
  }

  run () {
    this.request(this.queue[0]);
  }

  calculateProgressBar () {
    let p = Math.floor(this.fileCount/this.queue.length * 100);

    // console.log(p + '% of dependencies loaded');
    document.querySelector('#progressBar').style.width = p + 'vw';
    if (p == 100) document.querySelector('#progressBar').style.display = 'none';
  }

  apply(url, content, fromCache){
    let node;
    switch (url.split('.').pop()) {
      case 'js':
        node = document.createElement('script');
        node.innerHTML = content;
        break
      case 'css':
        node = document.createElement('style');
        node.type = 'text/css'
        if (node.styleSheet) {
          node.styleSheet.cssText = content;
        } else {
          node.appendChild(document.createTextNode(content));
        }
        break
    }

    document.querySelector('head').appendChild(node);

    !fromCache ? (() => {
      let cache = JSON.parse(localStorage.resquer);
      cache[url] = content;
      localStorage.resquer = JSON.stringify(cache);
    })() : false;
  }

  request (url) {
    false && JSON.parse(localStorage.resquer)[url] ? (() => {
      this.apply(url, JSON.parse(localStorage.resquer)[url], true)
    })() : (() => {
      let xhr = new XMLHttpRequest();
      xhr.open('GET', url);
      xhr.onload = () => {
        if (xhr.status >= 400) {
          console.error(url + ' - ' + xhr.statusText);
        } else {
          this.apply(url, xhr.response, false)
          // console.log(`${url} succesfully loaded!`);
        }
      };

      xhr.onerror = (event) => {
        console.log('error: ', url, xhr, event);
      };

      xhr.send();
    })();

    this.fileCount++;
    this.calculateProgressBar();

    if (this.fileCount < this.queue.length) {
      this.request(this.queue[this.fileCount])
    }
  }
}
